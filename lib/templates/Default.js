'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// The default template attempts to follow the schema from
// https://github.com/olivierlacan/keep-a-changelog

var Default = // Minimum number of changes to show per release

function Default(origin) {
  var _this = this;

  _classCallCheck(this, Default);

  this.logHeader = '# Change Log\nAll notable changes to this project will be documented in this file. This project adheres to [Semantic Versioning](http://semver.org/).\n\nGenerated by [auto-changelog](https://github.com/CookPete/auto-changelog)';
  this.unreleasedTitle = 'Unreleased';
  this.mergesTitle = 'Merged';
  this.fixesTitle = 'Fixed';
  this.commitsTitle = 'Commits';
  this.commitListLimit = 3;
  this.commitHashLength = 7;
  this.minimumChangeCount = 1;
  this.sectionSpacing = '\n\n\n';
  this.listSpacing = '\n\n';

  this.render = function (releases) {
    return [_this.logHeader, releases.map(_this.renderRelease).join(_this.sectionSpacing)].join(_this.sectionSpacing) + '\n';
  };

  this.renderRelease = function (release, index, releases) {
    var previousRelease = releases[index + 1];
    var log = [_this.renderReleaseHeading(release, previousRelease)];
    var merges = _this.renderMerges(release.merges);
    var fixes = _this.renderFixes(release.fixes);
    log = log.concat(merges).concat(fixes);
    var backfillCount = _this.minimumChangeCount - (release.merges.length + release.fixes.length);
    if (backfillCount > 0) {
      log = log.concat(_this.renderCommits(release.commits, backfillCount));
    }
    return log.join(_this.listSpacing);
  };

  this.renderReleaseHeading = function (release, previousRelease) {
    var title = _this.renderReleaseTitle(release, previousRelease);
    var date = release.date ? ' - ' + _this.formatDate(release.date) : '';
    return '## ' + title + date;
  };

  this.renderReleaseTitle = function (release, previousRelease) {
    var heading = release.tag || _this.unreleasedTitle;
    if (previousRelease) {
      heading = '[' + heading + '](' + _this.origin + '/compare/' + previousRelease.tag + '...' + (release.tag || 'HEAD') + ')';
    }
    return heading;
  };

  this.renderList = function (title, list) {
    var heading = title ? '### ' + title + '\n' : '';
    return heading + list;
  };

  this.renderMerges = function (merges) {
    if (merges.length === 0) return [];
    var list = merges.map(function (merge) {
      var href = merge.pr.replace('#', _this.origin + '/pull/');
      return _this.renderMerge({
        message: merge.message,
        link: '[`' + merge.pr + '`](' + href + ')'
      });
    }).join('\n');
    return _this.renderList(_this.mergesTitle, list);
  };

  this.renderMerge = function (_ref) {
    var message = _ref.message;
    var link = _ref.link;

    return '* ' + message + ' ' + link;
  };

  this.renderFixes = function (fixes) {
    if (fixes.length === 0) return [];
    var list = fixes.map(function (fix) {
      return _this.renderFix({
        commit: fix.commit,
        links: fix.fixes.map(_this.renderFixLink)
      });
    }).join('\n');
    return _this.renderList(_this.fixesTitle, list);
  };

  this.renderFix = function (_ref2) {
    var links = _ref2.links;
    var commit = _ref2.commit;

    return '* ' + commit.subject + ' ' + links.join(', ');
  };

  this.renderFixLink = function (string) {
    var href = string.replace('#', _this.origin + '/issues/');
    var number = string.replace(new RegExp(_this.origin + '/issues/', 'i'), '#');
    return '[`' + number + '`](' + href + ')';
  };

  this.renderCommits = function (commits, limit) {
    if (commits.length === 0) return [];
    limit = Math.min(limit, _this.commitListLimit);
    var list = commits.sort(_this.sortCommits).slice(0, limit).map(function (commit) {
      return _this.renderCommit({
        subject: commit.subject,
        link: _this.renderCommitLink(commit)
      });
    }).join('\n');
    return _this.renderList(_this.commitsTitle, list);
  };

  this.renderCommit = function (_ref3) {
    var subject = _ref3.subject;
    var link = _ref3.link;

    return '* ' + subject + ' ' + link;
  };

  this.renderCommitLink = function (_ref4) {
    var hash = _ref4.hash;

    var shortHash = hash.slice(0, _this.commitHashLength);
    var href = _this.origin + '/commit/' + hash;
    return '[`' + shortHash + '`](' + href + ')';
  };

  this.sortCommits = function (a, b) {
    // If we have to list commits, list the juicy ones first
    return b.insertions + b.deletions - a.insertions + a.deletions;
  };

  this.formatDate = function (date) {
    return date.slice(0, 10);
  };

  this.origin = 'https://' + origin.host + '/' + origin.repo;
};

exports.default = Default;